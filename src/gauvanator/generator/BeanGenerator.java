package gauvanator.generator;

import gauvanator.generator.fragments.BuilderFragmentGenerator;
import gauvanator.generator.fragments.EqualsFragmentGenerator;
import gauvanator.generator.fragments.GettersSettersFragmentGenerator;
import gauvanator.generator.fragments.HashCodeFragmentGenerator;
import gauvanator.generator.fragments.ToStringFragmentGenerator;

import org.eclipse.jdt.core.IBuffer;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jdt.core.ToolFactory;
import org.eclipse.jdt.core.formatter.CodeFormatter;
import org.eclipse.jface.text.BadLocationException;
import org.eclipse.jface.text.Document;
import org.eclipse.text.edits.MalformedTreeException;
import org.eclipse.text.edits.TextEdit;

public class BeanGenerator implements Generator {

  @Override
  public void generate(ICompilationUnit cu) {
    try {
      IBuffer buffer = cu.getBuffer();
      StringBuilder sb = new StringBuilder();
      sb.append("\n");
      sb.append("// Everything below is auto-generated by the Guavanator");
      sb.append("\n\n");
      sb.append(GettersSettersFragmentGenerator.generate(cu));
      sb.append("\n");
      sb.append(EqualsFragmentGenerator.generate(cu));
      sb.append("\n");
      sb.append(HashCodeFragmentGenerator.generate(cu));
      sb.append("\n");
      sb.append(ToStringFragmentGenerator.generate(cu));
      sb.append("\n");
      sb.append(BuilderFragmentGenerator.generate(cu));

      IType clazz = cu.getTypes()[0];
      cu.createImport("com.google.common.base.Objects", null, null);
      int pos = clazz.getSourceRange().getOffset() + clazz.getSourceRange().getLength() - 1;

      buffer.replace(pos, 0, sb.toString());
      String builderSource = buffer.getContents();

      TextEdit text = ToolFactory.createCodeFormatter(null).format(CodeFormatter.K_COMPILATION_UNIT,
          builderSource,
          0,
          builderSource.length(),
          0,
          "\n");
      // text is null if source cannot be formatted
      if (text != null) {
        Document simpleDocument = new Document(builderSource);
        text.apply(simpleDocument);
        buffer.setContents(simpleDocument.get());
      }

    } catch (BadLocationException | MalformedTreeException | JavaModelException e) {
      throw new RuntimeException(e);
    }
  }
}
